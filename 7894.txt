################ practical 1 ##################################
#Aim: To demonstrate binomial distribution in R programming   #
###############################################################

bino=function(){cat('enter the value of x')
x=scan(nmax=1)   
cat('enter the value of n')
n=scan(nmax=1)   
cat('enter the value of p')  
p=scan(nmax=1)  
print('enter the value of sign')   
var=readline()
if(var=='='){cat("P(X = ", x, ") = ", dbinom(x,n,p), sep="")}  
else if(var=='<='){cat("P(X = ", x, ") = ", pbinom(x,n,p), sep="")}  
else if(var=='>'){cat("P(X = ", x, ") = ", dbinom(x,n,p), sep="")} 
}
bino()


################## practical 2 ##############################
#Aim: To demonstrate normal distribution in R programming   #
################# ###########################################
norm=function(){   
  cat('enter the value of mean')
  mean=scan(nmax=1)  
  cat('enter the value of sd')
  sd=scan(nmax=1)   
  cat('enter the value of x')
  x=scan(nmax=1)  
  print('enter the value of sign')   
  var=readline()
  if(var=='='){cat("P(X = ", x, ") = ", dnorm(x,mean,sd), sep="")}  
  else if(var=='<='){cat("P(X <= ", x, ") = ", pnorm(x,mean,sd), sep="")}  
  else if(var=='>'){cat("P(X > ", x, ") = ",1-pnorm(x,mean,sd), sep="")}  
}  
norm()


##################practical 3##################################################
#Aim: To plot histogram for a random binomial distribution in R programming   #
###############################################################################

# Plotting Binomial Distribution
cat("Plotting binomial distribution\n")
cat("Enter the number of trials")
size = scan(nmax = "1")
cat("Enter the probability of success for individual trial")
p = scan(nmax = "1")
cat("Enter number of observations to be generated (for random sample)")
n = scan(nmax = "1")

generated = rbinom(n, size, p)

h = hist(generated,
         breaks = length(unique(generated)),
         plot = FALSE)

plot(h,
     freq = FALSE,
     space = NULL,
     xlim = c(0, size),
     ylim = c(0, 0.3),
     xlab = "Observed Value",
     ylab = "Probability",
     main = "Binomial Probability Distribution",
     col = "#FFD700",
     xaxt = "n")

axis(side=1, at=seq(0.5,size, by=1), labels=seq(1,size, by=1))


################### practical 4##################################################
#Aim: To plot a histogram for a random normal distribution using R programming  #
#################################################################################

# Plotting Normal Distribution 
cat("Plotting normal distribution\n")
cat("Enter the mean of the distribution")
mean = scan(nmax = "1")
cat("Enter the standard deviation of the distribution")
sd = scan(nmax = "1")
cat("Enter number of observations to be generated (for random sample)")
n = scan(nmax = "1")

generated = rnorm(n, mean, sd)
minimum = min(generated)
maximum = max(generated)
h = hist(generated, plot = FALSE)

plot(h,
     freq = FALSE, 
     xlim = c(minimum, maximum),
     ylim = c(0, 1), xlab = "Observed Value",
     ylab = "Probability",
     main = "Normal Probability Distribution",
     col = "#DFFF00")

line_range = seq(minimum, maximum, by = (maximum-minimum)/100)
lines(line_range, dnorm(line_range, mean(generated), sd(generated)))


###################### practical 5######################################################
#Aim: To plot pdf, pmf, cdf for discrete and continuous distribution in R programming  #
########################################################################################

#PMF For Binomial Distribution
n =13
p = 0.7
dbinom(6, size = n, prob = p)
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")

#CDF For Binomial Distribution 
pbinom(9, size = n, prob = p)
plot(x, pbinom(x, size = n, prob = p), type="s", main = "Cumulative distribution function forBin(13,0.7)")

#PDF for Uniform Distribution \
a <- 0
b <- 1

# The curve function expects you to give a function of `x` and then it
# (internally) creates a sequence of values from `from` and to `to` and creates # plots similar to what we had before, but using a line rather than points. 
curve(dunif(x, min = a, max = b), from = -1, to = 2,
      xlab='y', ylab='f(y)', main='Probability density function for Unif(0,1)')

#PDF for Normal Distribution
mu	<- 0
sigma <- 1 # standard deviation
curve(dnorm(x, mean = mu, sd = sigma), # notice the 3rd argument is the sd 
      from = -4, to = 4,
      main = "PDF for a standard normal") 

#CDF for a Normal Distribution 
curve(pnorm(x, mean = mu, sd = sigma),
      from = -4, to = 4,
      main = "CDF for a standard normal", ylab = "F(x)")

#Problem: Plot the pdf, cdf, and quantile function for
#a normal distribution with mean -4 and variance 3, i.e. X???N(???4,3). 
#Then sample 999 random N(-4,3) and plot a histogram of these draws #with the probability density function.
mu	<- -4 
sigma <- sqrt(3)
opar = par(mfrow=c(2,2))
curve(dnorm(x, mean = mu, sd = sigma),
      from = mu-4*sigma, to = mu+4*sigma,
      main = "PDF for a normal")

curve(pnorm(x, mean = mu, sd = sigma),
      from = mu-4*sigma, to = mu+4*sigma,
      main = "CDF for a normal")

curve(qnorm(x, mean = mu, sd = sigma),
      from = 0, to = 1,
      main = "Quantile function for a normal")

draws <- rnorm(999, mean = mu, sd = sigma)
hist(draws, probability = TRUE)
curve(dnorm(x, mean = mu, sd = sigma), add = TRUE, col = "red")


######################practical 6################################
#Aim: To implement t-test, normal and F-test in R programming   #
#################################################################


###
#Single Sample t-test Code:
###

cat("Enter no of Observations of Sample")
n=scan(nmax = 1)
cat("Enter Observations of Sample") 
x=scan(nmax = n)

cat("mean of the population is")

popu_mean = scan(nmax = 1)

t.test(x,y=NULL, mu = popu_mean)


###
#Two Sample t test code:
###

cat("Enter no of obervations of 1st data")
n1=scan(nmax = 1)
cat("enter observations of 1st data")
x=scan(nmax = n1)

cat("Enter no of obervations of 2nd data")
n2=scan(nmax = 1)
cat("enter observations of 2nd data")
y=scan(nmax = n2)

if(n1 != n2){
  print("Independent samples")
  print(t.test(x,y,mu=0,paired = FALSE))
}else{
  print("Dependent samples")
  print(t.test(x,y,mu=0,paired = TRUE))
}


###
#F-test Code:
###


cat("Enter no of Observations of Sample1")
n1=scan(nmax = 1)
cat("Enter Observations of Sample1")
S1=scan(nmax=n1)

cat("Enter no of Observations of Sample2")
n2=scan(nmax = 1)
cat("Enter Observations of Sample2")
S2=scan(nmax = n2)

Variance_Ratio = var.test(S1,S2)
Variance_Ratio

####################practical 7#############################
#Aim: analysis of variance one way anova and 2 way anova   #
############################################################
> open excel sheet (enter the data given according to rows or columns)
>go to file/options/addins/excel addins/go/select analysis toolpak
>data tab/data analysis(extreme right) click on anova single factor /
>input range(select all data)/
>grouped by columns or rows/
>tick labels if label is selected(column name) 
>enter alpha value(usually 0.05
>output options (where you want output)
>if f>fcrit then test is significant
>if if p value is <= alpha value(usually 0.05) then reject Ho) 
>almost same for 2 way anova without replication as well
>2 way anova with replication means you have to mention how many samples are in one group(no.of rows)

####################practical 8##################################################
#Aim: To implement non-parametric tests (sign test & run Test) in R programming #
#################################################################################


###
#Sign Test Code:
###

library(BSDA)
cat("Enter the sample size")
n = scan(nmax = 1)
cat("Enter the values in the sample")
x = scan(nmax = n)
cat("Enter the median to test")
md = scan(nmax = 1)
cat("Enter type of test\ntwo.sided\ngreater\nless")
choice=readline()
cat ("Enter alpha value")
alpha = scan(nmax = 1)

test = SIGN.test(x, y = NULL, md, alternative = choice)
print(test)
if(test$p.value<alpha){
  cat("Reject Null Hypothesis; Accept Alternate Hypothesis")
}else{
  cat("Accept Null Hypothesis; Reject Alternate Hypothesis")
}


#############
#run test code
############


library(crayon)
cat("enter n1 value")
n1 = scan(nmax = 1)
cat("enter n2 value")
n2 = scan(nmax = 1)
#R Bar
cat("enter number of runs")
R = scan(nmax = 1)
print("Expected number of runs is:")
x = 2 * n1 * n2
y = n1 + n2
R.bar = (x / y) + 1
R.bar
#standard deviation of the runs
x = 2* n1 * n2
a = n1 - n2
c = (n1 + n2) ** 2
d = n1 + n2 - 1
print("standard deviation of the runs is:")
Nume = x * (x - a)
Denom = c * d
S2 = Nume / Denom
S2
#Test statistics for Run test 
print("Calculated Z value is:")
z = (R - R.bar) / S2
z

if(z < 1.96){
  print("We Accept H0 ")
  print("Hence, Data is Random")
}else if(z > 1.96){
  print("We Reject H0")
  print("Hence, Data is non-Random")
}  
####################practical 9#
#Aim: kruskal walis test       #
################################
>first enter the value in columns
>all the groups in single column 
>group number in column A and values in column b and rank in rank column
>now make a new column called rank using rank.avg(first cell of column B,whole column B,ascending)
>calculate numerator by using 
=countif(range from column A[group names],cell of output)*(range from column A[group names],cell of output,rank column)-average(rank column))^2
>calculate numerator
=devsq(rank column)
>calculate H
=(count(column A)-1)*sum(num cells)/deno cell
>called degree of freedom
=no.of group -1
>calculate p value
=1-chisq.dist(H value,df,TRUE)
if p value > 0.05 then accept H0
###################################
 to implement kruskal wallis in R #
###################################

s1  = sample.int(100, 10)
s1
s2=sample.int(100, 10)
s2
s=data.frame(s1,s2)
summary(s)
stacked=stack(s)
head(stacked)
kruskal.test(values~ind,data = stacked)
if p value > 0.05 then accept H0 

##########practical 10############
##aim- Wilcoxon Signed Rank Test # 
##################################
#wilcoxon for small sample:
cat("enter the values of the sample")
x = scan()
cat("median of the population is")
mu = scan(nmax = 1)
cat("Type 1 for two.sided\n")
cat("Type 2 for greater\n")
cat("Type 3 for less\n")
choice = readline()
if(choice == 1){
 wilcox.test(x, y = NULL, mu, alternative = "two.sided", paired = F, exact = F)
}else if(choice == 2){
 wilcox.test(x, y = NULL, mu, alternative = "greater", paired = F, exact = F)
}else if(choice ==3 ){
 wilcox.test(x, y = NULL, mu, alternative = "less", paired = F, exact = F)
}
#Wilcoxon for Large Samples
cat("enter the values of X sample")
x=scan()
cat("enter the values of Y sample")
y=scan()
len_x = length(x)
len_y = length(y)
if (len_x == len_y & len_x >= 30 & len_y >= 30){
 cat("Type 1 for Two.sided\n")
 cat("Type 2 for greater\n")
 cat("Type 3 for less\n")
 choice = readline()
 if(choice == 1){
 wilcox.test(x, y, mu1, alternative = "two.sided", paired = T, exact = F)
 }else if(choice == 2){
 wilcox.test(x, y, mu1, alternative = "greater", paired = T, exact = F)
 }else if(choice == 3){
 wilcox.test(x, y, mu1, alternative = "less", paired = T, exact = F)
 }
}else{
 cat("Enter Correct Values")
}

#########################################
#Aim: To implement Time series Analysis #
#########################################


data1 = rnorm(50)
monthly = ts(data1, start=c(2000), frequency = 12)
monthly
quaterly = ts(data1, start=c(2000), frequency = 4)
quaterly
plot(monthly)
plot(quaterly)

lines(monthly,col = 2)

sales=c(2354,2379,2318,2468,2386,2569,2575,2762,3000,3108,3357,3075,3357,3180,3221,
        3420,3512,3430,3655)
timeseries3=ts(sales,start = 1989, end = 2008, frequency = 5)
timeseries3
plot(timeseries3)



